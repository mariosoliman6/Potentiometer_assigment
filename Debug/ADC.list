
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f94  08003f94  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003f94  08003f94  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f94  08003f94  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000090  0800402c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800402c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a080  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb2  00000000  00000000  0002a139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f7  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c85d  00000000  00000000  0004559f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca1e  00000000  00000000  00051dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de81a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000de86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ef8 	.word	0x08003ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08003ef8 	.word	0x08003ef8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000516:	f000 fdd3 	bl	80010c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051a:	f000 f875 	bl	8000608 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051e:	f000 f9d1 	bl	80008c4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000522:	f000 f8cd 	bl	80006c0 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000526:	f000 f909 	bl	800073c <MX_ADC2_Init>
	MX_TIM3_Init();
 800052a:	f000 f955 	bl	80007d8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc2);
 800052e:	482d      	ldr	r0, [pc, #180]	; (80005e4 <main+0xd4>)
 8000530:	f000 ff24 	bl	800137c <HAL_ADC_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	482c      	ldr	r0, [pc, #176]	; (80005e8 <main+0xd8>)
 8000538:	f002 fb04 	bl	8002b44 <HAL_TIM_PWM_Start>
	Alcd_Init(&lcd, 2, 16);
 800053c:	2210      	movs	r2, #16
 800053e:	2102      	movs	r1, #2
 8000540:	482a      	ldr	r0, [pc, #168]	; (80005ec <main+0xdc>)
 8000542:	f000 fc95 	bl	8000e70 <Alcd_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_PollForConversion(&hadc2, 100);
 8000546:	2164      	movs	r1, #100	; 0x64
 8000548:	4826      	ldr	r0, [pc, #152]	; (80005e4 <main+0xd4>)
 800054a:	f000 ffc5 	bl	80014d8 <HAL_ADC_PollForConversion>
		uint16_t Result = HAL_ADC_GetValue(&hadc2);
 800054e:	4825      	ldr	r0, [pc, #148]	; (80005e4 <main+0xd4>)
 8000550:	f001 f8c8 	bl	80016e4 <HAL_ADC_GetValue>
 8000554:	4603      	mov	r3, r0
 8000556:	80fb      	strh	r3, [r7, #6]

		Theta = ADC_To_Degree(Result);
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f9ee 	bl	800093c <ADC_To_Degree>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <main+0xe0>)
 8000566:	701a      	strb	r2, [r3, #0]
		Phi = Theta;
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <main+0xe0>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0xe4>)
 800056e:	701a      	strb	r2, [r3, #0]
		if (Phi > 180) {
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <main+0xe4>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2bb4      	cmp	r3, #180	; 0xb4
 8000576:	d902      	bls.n	800057e <main+0x6e>
			Phi = 180;
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <main+0xe4>)
 800057a:	22b4      	movs	r2, #180	; 0xb4
 800057c:	701a      	strb	r2, [r3, #0]

		}

		//servo

		PWM_Value = Angle_in_Degree_to_PWM(Phi);
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xe4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff4c 	bl	8000420 <__aeabi_ui2f>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f9bc 	bl	8000908 <Angle_in_Degree_to_PWM>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <main+0xe8>)
 8000596:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Value);
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <main+0xe8>)
 800059a:	881a      	ldrh	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <main+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
		//lcd
		Len =sprintf(degree_str, "Angle = %02d", (int) Phi);
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <main+0xe4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0xec>)
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <main+0xf0>)
 80005ac:	f003 f82a 	bl	8003604 <siprintf>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <main+0xf4>)
 80005b6:	701a      	strb	r2, [r3, #0]
		Alcd_PutAt_n(&lcd, 0, 0, degree_str, Len);
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0xf4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <main+0xf0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0xdc>)
 80005c6:	f000 fd0e 	bl	8000fe6 <Alcd_PutAt_n>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Value);
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0xe8>)
 80005cc:	881a      	ldrh	r2, [r3, #0]
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <main+0xd8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fdd4 	bl	8001184 <HAL_Delay>
		Alcd_Clear(&lcd);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0xdc>)
 80005de:	f000 fd1b 	bl	8001018 <Alcd_Clear>
	while (1) {
 80005e2:	e7b0      	b.n	8000546 <main+0x36>
 80005e4:	200000dc 	.word	0x200000dc
 80005e8:	2000010c 	.word	0x2000010c
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000155 	.word	0x20000155
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20000156 	.word	0x20000156
 80005fc:	08003f10 	.word	0x08003f10
 8000600:	2000015c 	.word	0x2000015c
 8000604:	20000158 	.word	0x20000158

08000608 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 ffec 	bl	80035f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000654:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fc60 	bl	8001f24 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x66>
		Error_Handler();
 800066a:	f000 f980 	bl	800096e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fecc 	bl	8002428 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x92>
		Error_Handler();
 8000696:	f000 f96a 	bl	800096e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800069a:	2302      	movs	r3, #2
 800069c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800069e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006a2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f838 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xae>
		Error_Handler();
 80006b2:	f000 f95c 	bl	800096e <Error_Handler>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_ADC1_Init+0x74>)
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <MX_ADC1_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_ADC1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_ADC1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_ADC1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_ADC1_Init+0x74>)
 80006ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006ee:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_ADC1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_ADC1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC1_Init+0x74>)
 80006fe:	f000 fd65 	bl	80011cc <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000708:	f000 f931 	bl	800096e <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000710:	2301      	movs	r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC1_Init+0x74>)
 800071e:	f000 ffed 	bl	80016fc <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000728:	f000 f921 	bl	800096e <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000ac 	.word	0x200000ac
 8000738:	40012400 	.word	0x40012400

0800073c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ADC2_Init+0x94>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <MX_ADC2_Init+0x98>)
 8000750:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ADC2_Init+0x94>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ADC2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_ADC2_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ADC2_Init+0x94>)
 8000768:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800076c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ADC2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 2;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_ADC2_Init+0x94>)
 8000776:	2202      	movs	r2, #2
 8000778:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <MX_ADC2_Init+0x94>)
 800077c:	f000 fd26 	bl	80011cc <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC2_Init+0x4e>
		Error_Handler();
 8000786:	f000 f8f2 	bl	800096e <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2301      	movs	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000792:	2303      	movs	r3, #3
 8000794:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC2_Init+0x94>)
 800079c:	f000 ffae 	bl	80016fc <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC2_Init+0x6e>
		Error_Handler();
 80007a6:	f000 f8e2 	bl	800096e <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_ADC2_Init+0x94>)
 80007b8:	f000 ffa0 	bl	80016fc <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0x8a>
		Error_Handler();
 80007c2:	f000 f8d4 	bl	800096e <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc
 80007d4:	40012800 	.word	0x40012800

080007d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <MX_TIM3_Init+0xe4>)
 800080a:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800080c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_TIM3_Init+0xe4>)
 8000810:	2247      	movs	r2, #71	; 0x47
 8000812:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <MX_TIM3_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_TIM3_Init+0xe4>)
 800081c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000820:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_TIM3_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_TIM3_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800082e:	4823      	ldr	r0, [pc, #140]	; (80008bc <MX_TIM3_Init+0xe4>)
 8000830:	f002 f8e0 	bl	80029f4 <HAL_TIM_Base_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x66>
		Error_Handler();
 800083a:	f000 f898 	bl	800096e <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000848:	4619      	mov	r1, r3
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <MX_TIM3_Init+0xe4>)
 800084c:	f002 fade 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x82>
		Error_Handler();
 8000856:	f000 f88a 	bl	800096e <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800085a:	4818      	ldr	r0, [pc, #96]	; (80008bc <MX_TIM3_Init+0xe4>)
 800085c:	f002 f919 	bl	8002a92 <HAL_TIM_PWM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x92>
		Error_Handler();
 8000866:	f000 f882 	bl	800096e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4619      	mov	r1, r3
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <MX_TIM3_Init+0xe4>)
 800087a:	f002 fe33 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000884:	f000 f873 	bl	800096e <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000888:	2360      	movs	r3, #96	; 0x60
 800088a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM3_Init+0xe4>)
 80008a0:	f002 f9f2 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80008aa:	f000 f860 	bl	800096e <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM3_Init+0xe4>)
 80008b0:	f000 f908 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3738      	adds	r7, #56	; 0x38
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_GPIO_Init+0x40>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <MX_GPIO_Init+0x40>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_GPIO_Init+0x40>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_GPIO_Init+0x40>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <MX_GPIO_Init+0x40>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_GPIO_Init+0x40>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	40021000 	.word	0x40021000

08000908 <Angle_in_Degree_to_PWM>:

/* USER CODE BEGIN 4 */
uint32_t Angle_in_Degree_to_PWM(float phi) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	return ((float) ((float) (1900 / 180) * phi) + 500);
 8000910:	4908      	ldr	r1, [pc, #32]	; (8000934 <Angle_in_Degree_to_PWM+0x2c>)
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fc1a 	bl	800014c <__aeabi_fmul>
 8000918:	4603      	mov	r3, r0
 800091a:	4907      	ldr	r1, [pc, #28]	; (8000938 <Angle_in_Degree_to_PWM+0x30>)
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fccf 	bl	80002c0 <__addsf3>
 8000922:	4603      	mov	r3, r0
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdd3 	bl	80004d0 <__aeabi_f2uiz>
 800092a:	4603      	mov	r3, r0

}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	41200000 	.word	0x41200000
 8000938:	43fa0000 	.word	0x43fa0000

0800093c <ADC_To_Degree>:

uint8_t ADC_To_Degree(uint16_t ADC) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]

	return (ADC * ((float) (3 / 40)));
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd6d 	bl	8000428 <__aeabi_i2f>
 800094e:	4603      	mov	r3, r0
 8000950:	f04f 0100 	mov.w	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fbf9 	bl	800014c <__aeabi_fmul>
 800095a:	4603      	mov	r3, r0
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fdb7 	bl	80004d0 <__aeabi_f2uiz>
 8000962:	4603      	mov	r3, r0
 8000964:	b2db      	uxtb	r3, r3

}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000976:	e7fe      	b.n	8000976 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x40>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_MspInit+0x40>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x40>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x40>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_MspInit+0x40>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_MspInit+0x40>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <HAL_ADC_MspInit+0xbc>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d122      	bne.n	8000a22 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a26      	ldr	r2, [pc, #152]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <HAL_ADC_MspInit+0xc4>)
 8000a1c:	f001 f8e6 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a20:	e026      	b.n	8000a70 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_ADC_MspInit+0xc8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d121      	bne.n	8000a70 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_ADC_MspInit+0xc0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_ADC_MspInit+0xc4>)
 8000a6c:	f001 f8be 	bl	8001bec <HAL_GPIO_Init>
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40012400 	.word	0x40012400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	40012800 	.word	0x40012800

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x34>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d10b      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_TIM_Base_MspInit+0x38>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_TIM_Base_MspInit+0x38>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_TIM_Base_MspInit+0x38>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40000400 	.word	0x40000400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_TIM_MspPostInit+0x58>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d117      	bne.n	8000b14 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_TIM_MspPostInit+0x5c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_TIM_MspPostInit+0x5c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_TIM_MspPostInit+0x5c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_TIM_MspPostInit+0x60>)
 8000b10:	f001 f86c 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40000400 	.word	0x40000400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 faed 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 fcfa 	bl	80035a0 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20005000 	.word	0x20005000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	2000016c 	.word	0x2000016c
 8000be0:	20000188 	.word	0x20000188

08000be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff fff8 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bf6:	490c      	ldr	r1, [pc, #48]	; (8000c28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c0c:	4c09      	ldr	r4, [pc, #36]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f002 fcc7 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fc77 	bl	8000510 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c2c:	08003f9c 	.word	0x08003f9c
  ldr r2, =_sbss
 8000c30:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c34:	20000184 	.word	0x20000184

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <DWT_Delay_Init+0x58>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <DWT_Delay_Init+0x58>)
 8000c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c4a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <DWT_Delay_Init+0x58>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <DWT_Delay_Init+0x58>)
 8000c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c56:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c76:	bf00      	nop
     __ASM volatile ("NOP");
 8000c78:	bf00      	nop
  __ASM volatile ("NOP");
 8000c7a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <DWT_Delay_Init+0x5c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000c88:	2301      	movs	r3, #1
  }
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000edf0 	.word	0xe000edf0
 8000c98:	e0001000 	.word	0xe0001000

08000c9c <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <DWT_Delay_us+0x40>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000caa:	f001 fcfb 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <DWT_Delay_us+0x44>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000cc0:	bf00      	nop
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <DWT_Delay_us+0x40>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	1ad2      	subs	r2, r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3f8      	bcc.n	8000cc2 <DWT_Delay_us+0x26>
		;
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e0001000 	.word	0xe0001000
 8000ce0:	431bde83 	.word	0x431bde83

08000ce4 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ffd3 	bl	8000c9c <DWT_Delay_us>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	4619      	mov	r1, r3
 8000d16:	230f      	movs	r3, #15
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	400a      	ands	r2, r1
 8000d24:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	7a09      	ldrb	r1, [r1, #8]
 8000d32:	408b      	lsls	r3, r1
 8000d34:	4619      	mov	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	60da      	str	r2, [r3, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6958      	ldr	r0, [r3, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	8b1b      	ldrh	r3, [r3, #24]
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f001 f8c8 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68d8      	ldr	r0, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	8a1b      	ldrh	r3, [r3, #16]
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4619      	mov	r1, r3
 8000d84:	f001 f8b6 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f107 0208 	add.w	r2, r7, #8
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 ff14 	bl	8001bec <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	8a1b      	ldrh	r3, [r3, #16]
 8000dc8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 ff09 	bl	8001bec <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7a1b      	ldrb	r3, [r3, #8]
 8000dde:	461a      	mov	r2, r3
 8000de0:	230f      	movs	r3, #15
 8000de2:	4093      	lsls	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f107 0208 	add.w	r2, r7, #8
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fefb 	bl	8001bec <HAL_GPIO_Init>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	4619      	mov	r1, r3
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff98 	bl	8000d48 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000e18:	78bb      	ldrb	r3, [r7, #2]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff6c 	bl	8000cfe <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000e26:	2101      	movs	r1, #1
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff9f 	bl	8000d6c <EN_SET>
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f7ff ff58 	bl	8000ce4 <usDelay>
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff98 	bl	8000d6c <EN_SET>
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	f7ff ff51 	bl	8000ce4 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000e42:	78bb      	ldrb	r3, [r7, #2]
 8000e44:	4619      	mov	r1, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff59 	bl	8000cfe <Write_HalfByte>
	PulseEn
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff8c 	bl	8000d6c <EN_SET>
 8000e54:	200a      	movs	r0, #10
 8000e56:	f7ff ff45 	bl	8000ce4 <usDelay>
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff85 	bl	8000d6c <EN_SET>
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f7ff ff3e 	bl	8000ce4 <usDelay>
	;
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000e80:	f7ff fedc 	bl	8000c3c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff83 	bl	8000d90 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	78ba      	ldrb	r2, [r7, #2]
 8000e9a:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000e9c:	78bb      	ldrb	r3, [r7, #2]
 8000e9e:	3340      	adds	r3, #64	; 0x40
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff4d 	bl	8000d48 <RS_SET>
	EN_SET(lcd, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff5b 	bl	8000d6c <EN_SET>
	usDelay(50000);
 8000eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eba:	f7ff ff13 	bl	8000ce4 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e018      	b.n	8000ef6 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff19 	bl	8000cfe <Write_HalfByte>
		PulseEn
 8000ecc:	2101      	movs	r1, #1
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <EN_SET>
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f7ff ff05 	bl	8000ce4 <usDelay>
 8000eda:	2100      	movs	r1, #0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff45 	bl	8000d6c <EN_SET>
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f7ff fefe 	bl	8000ce4 <usDelay>
		;
		usDelay(4500);
 8000ee8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000eec:	f7ff fefa 	bl	8000ce4 <usDelay>
	for (x = 0; x < 2; x++)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d9e3      	bls.n	8000ec4 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000efc:	2103      	movs	r1, #3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fefd 	bl	8000cfe <Write_HalfByte>
	PulseEn
 8000f04:	2101      	movs	r1, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff30 	bl	8000d6c <EN_SET>
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f7ff fee9 	bl	8000ce4 <usDelay>
 8000f12:	2100      	movs	r1, #0
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <EN_SET>
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f7ff fee2 	bl	8000ce4 <usDelay>
	;
	usDelay(150);
 8000f20:	2096      	movs	r0, #150	; 0x96
 8000f22:	f7ff fedf 	bl	8000ce4 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000f26:	2102      	movs	r1, #2
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fee8 	bl	8000cfe <Write_HalfByte>
	PulseEn
 8000f2e:	2101      	movs	r1, #1
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff1b 	bl	8000d6c <EN_SET>
 8000f36:	200a      	movs	r0, #10
 8000f38:	f7ff fed4 	bl	8000ce4 <usDelay>
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff14 	bl	8000d6c <EN_SET>
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f7ff fecd 	bl	8000ce4 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000f4a:	2228      	movs	r2, #40	; 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff55 	bl	8000dfe <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f86d 	bl	800103a <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f859 	bl	8001018 <Alcd_Clear>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	70fb      	strb	r3, [r7, #3]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	7e9a      	ldrb	r2, [r3, #26]
 8000f86:	78bb      	ldrb	r3, [r7, #2]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff2f 	bl	8000dfe <Alcd_SendByte>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	e00b      	b.n	8000fd4 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff ff18 	bl	8000dfe <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	75fb      	strb	r3, [r7, #23]
 8000fd4:	7dfa      	ldrb	r2, [r7, #23]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3ef      	bcc.n	8000fbc <Alcd_Put_n+0x14>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	72fb      	strb	r3, [r7, #11]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000ff8:	7aba      	ldrb	r2, [r7, #10]
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f7ff ffb5 	bl	8000f6e <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8001004:	7e3b      	ldrb	r3, [r7, #24]
 8001006:	461a      	mov	r2, r3
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ffcc 	bl	8000fa8 <Alcd_Put_n>
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8001020:	2201      	movs	r2, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff feea 	bl	8000dfe <Alcd_SendByte>
	usDelay(2000);
 800102a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800102e:	f7ff fe59 	bl	8000ce4 <usDelay>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	4608      	mov	r0, r1
 8001044:	4611      	mov	r1, r2
 8001046:	461a      	mov	r2, r3
 8001048:	4603      	mov	r3, r0
 800104a:	70fb      	strb	r3, [r7, #3]
 800104c:	460b      	mov	r3, r1
 800104e:	70bb      	strb	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7f9b      	ldrb	r3, [r3, #30]
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7f9b      	ldrb	r3, [r3, #30]
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7f9b      	ldrb	r3, [r3, #30]
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f9b      	ldrb	r3, [r3, #30]
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7f9b      	ldrb	r3, [r3, #30]
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fea3 	bl	8000dfe <Alcd_SendByte>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fd57 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fc4c 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd61 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 fd37 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000020 	.word	0x20000020
 8001144:	20000028 	.word	0x20000028
 8001148:	20000024 	.word	0x20000024

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000028 	.word	0x20000028
 800116c:	20000170 	.word	0x20000170

08001170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000170 	.word	0x20000170

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000028 	.word	0x20000028

080011cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0be      	b.n	800136c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d109      	bne.n	8001210 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fbd6 	bl	80009bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fbc5 	bl	80019a0 <ADC_ConversionStop_Disable>
 8001216:	4603      	mov	r3, r0
 8001218:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 8099 	bne.w	800135a <HAL_ADC_Init+0x18e>
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 8095 	bne.w	800135a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	f043 0202 	orr.w	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800124c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b1b      	ldrb	r3, [r3, #12]
 8001252:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001254:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4313      	orrs	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001264:	d003      	beq.n	800126e <HAL_ADC_Init+0xa2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <HAL_ADC_Init+0xa8>
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001272:	e000      	b.n	8001276 <HAL_ADC_Init+0xaa>
 8001274:	2300      	movs	r3, #0
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7d1b      	ldrb	r3, [r3, #20]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d119      	bne.n	80012b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	3b01      	subs	r3, #1
 8001292:	035a      	lsls	r2, r3, #13
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0220 	orr.w	r2, r3, #32
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_ADC_Init+0x1a8>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	430b      	orrs	r3, r1
 80012de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e8:	d003      	beq.n	80012f2 <HAL_ADC_Init+0x126>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d104      	bne.n	80012fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	051b      	lsls	r3, r3, #20
 80012fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	430a      	orrs	r2, r1
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_ADC_Init+0x1ac>)
 8001318:	4013      	ands	r3, r2
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	d10b      	bne.n	8001338 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001336:	e018      	b.n	800136a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	f023 0312 	bic.w	r3, r3, #18
 8001340:	f043 0210 	orr.w	r2, r3, #16
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001358:	e007      	b.n	800136a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	f043 0210 	orr.w	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	ffe1f7fd 	.word	0xffe1f7fd
 8001378:	ff1f0efe 	.word	0xff1f0efe

0800137c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Start+0x1a>
 8001392:	2302      	movs	r3, #2
 8001394:	e098      	b.n	80014c8 <HAL_ADC_Start+0x14c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 faa4 	bl	80018ec <ADC_Enable>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 8087 	bne.w	80014be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a41      	ldr	r2, [pc, #260]	; (80014d0 <HAL_ADC_Start+0x154>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d105      	bne.n	80013da <HAL_ADC_Start+0x5e>
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_ADC_Start+0x158>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d115      	bne.n	8001406 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d026      	beq.n	8001442 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001404:	e01d      	b.n	8001442 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2f      	ldr	r2, [pc, #188]	; (80014d4 <HAL_ADC_Start+0x158>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d004      	beq.n	8001426 <HAL_ADC_Start+0xaa>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2b      	ldr	r2, [pc, #172]	; (80014d0 <HAL_ADC_Start+0x154>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10d      	bne.n	8001442 <HAL_ADC_Start+0xc6>
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_ADC_Start+0x158>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800143a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	f023 0206 	bic.w	r2, r3, #6
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
 800145a:	e002      	b.n	8001462 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f06f 0202 	mvn.w	r2, #2
 8001472:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800147e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001482:	d113      	bne.n	80014ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_ADC_Start+0x154>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d105      	bne.n	800149a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADC_Start+0x158>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e00c      	b.n	80014c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e003      	b.n	80014c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40012800 	.word	0x40012800
 80014d4:	40012400 	.word	0x40012400

080014d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ee:	f7ff fe3f 	bl	8001170 <HAL_GetTick>
 80014f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f043 0220 	orr.w	r2, r3, #32
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0d3      	b.n	80016c2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d131      	bne.n	800158c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d12a      	bne.n	800158c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001536:	e021      	b.n	800157c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153e:	d01d      	beq.n	800157c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_ADC_PollForConversion+0x7e>
 8001546:	f7ff fe13 	bl	8001170 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d212      	bcs.n	800157c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10b      	bne.n	800157c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f043 0204 	orr.w	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0a2      	b.n	80016c2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0d6      	beq.n	8001538 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800158a:	e070      	b.n	800166e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <HAL_ADC_PollForConversion+0x1f4>)
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	2002      	movs	r0, #2
 8001592:	f001 f979 	bl	8002888 <HAL_RCCEx_GetPeriphCLKFreq>
 8001596:	4603      	mov	r3, r0
 8001598:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6919      	ldr	r1, [r3, #16]
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_ADC_PollForConversion+0x1f8>)
 80015a4:	400b      	ands	r3, r1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_ADC_PollForConversion+0x104>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68d9      	ldr	r1, [r3, #12]
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_ADC_PollForConversion+0x1fc>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_ADC_PollForConversion+0x104>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_ADC_PollForConversion+0x200>)
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x100>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_ADC_PollForConversion+0x204>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x100>
 80015d4:	2314      	movs	r3, #20
 80015d6:	e020      	b.n	800161a <HAL_ADC_PollForConversion+0x142>
 80015d8:	2329      	movs	r3, #41	; 0x29
 80015da:	e01e      	b.n	800161a <HAL_ADC_PollForConversion+0x142>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6919      	ldr	r1, [r3, #16]
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_ADC_PollForConversion+0x200>)
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x120>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_ADC_PollForConversion+0x204>)
 80015f2:	400b      	ands	r3, r1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00d      	beq.n	8001614 <HAL_ADC_PollForConversion+0x13c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6919      	ldr	r1, [r3, #16]
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_ADC_PollForConversion+0x208>)
 8001600:	400b      	ands	r3, r1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <HAL_ADC_PollForConversion+0x140>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68d9      	ldr	r1, [r3, #12]
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_ADC_PollForConversion+0x208>)
 800160e:	400b      	ands	r3, r1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_ADC_PollForConversion+0x140>
 8001614:	2354      	movs	r3, #84	; 0x54
 8001616:	e000      	b.n	800161a <HAL_ADC_PollForConversion+0x142>
 8001618:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001620:	e021      	b.n	8001666 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d01a      	beq.n	8001660 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <HAL_ADC_PollForConversion+0x168>
 8001630:	f7ff fd9e 	bl	8001170 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d20f      	bcs.n	8001660 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d90b      	bls.n	8001660 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e030      	b.n	80016c2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	429a      	cmp	r2, r3
 800166c:	d8d9      	bhi.n	8001622 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f06f 0212 	mvn.w	r2, #18
 8001676:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800168e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001692:	d115      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000020 	.word	0x20000020
 80016d0:	24924924 	.word	0x24924924
 80016d4:	00924924 	.word	0x00924924
 80016d8:	12492492 	.word	0x12492492
 80016dc:	00492492 	.word	0x00492492
 80016e0:	00249249 	.word	0x00249249

080016e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x20>
 8001718:	2302      	movs	r3, #2
 800171a:	e0dc      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1da>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d81c      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b05      	subs	r3, #5
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3b05      	subs	r3, #5
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e03c      	b.n	80017e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d81c      	bhi.n	80017a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	; 0x23
 8001780:	221f      	movs	r2, #31
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	; 0x23
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
 80017a6:	e01b      	b.n	80017e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b41      	subs	r3, #65	; 0x41
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b41      	subs	r3, #65	; 0x41
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d91c      	bls.n	8001822 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68d9      	ldr	r1, [r3, #12]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	3b1e      	subs	r3, #30
 80017fa:	2207      	movs	r2, #7
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6898      	ldr	r0, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	3b1e      	subs	r3, #30
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	e019      	b.n	8001856 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6919      	ldr	r1, [r3, #16]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	2207      	movs	r2, #7
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	4019      	ands	r1, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d003      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001862:	2b11      	cmp	r3, #17
 8001864:	d132      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d125      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d126      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800188c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d11a      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9a      	lsrs	r2, r3, #18
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x1b2>
 80018ba:	e007      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0220 	orr.w	r2, r3, #32
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40012400 	.word	0x40012400
 80018e4:	20000020 	.word	0x20000020
 80018e8:	431bde83 	.word	0x431bde83

080018ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d040      	beq.n	800198c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <ADC_Enable+0xac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1f      	ldr	r2, [pc, #124]	; (800199c <ADC_Enable+0xb0>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001928:	e002      	b.n	8001930 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001936:	f7ff fc1b 	bl	8001170 <HAL_GetTick>
 800193a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800193c:	e01f      	b.n	800197e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800193e:	f7ff fc17 	bl	8001170 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d918      	bls.n	800197e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d011      	beq.n	800197e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e007      	b.n	800198e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d1d8      	bne.n	800193e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000020 	.word	0x20000020
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d12e      	bne.n	8001a18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ca:	f7ff fbd1 	bl	8001170 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d0:	e01b      	b.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d2:	f7ff fbcd 	bl	8001170 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d914      	bls.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10d      	bne.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d0dc      	beq.n	80019d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff90 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff49 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff5e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff90 	bl	8001adc <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5f 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb0 	bl	8001b40 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e169      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8158 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a9a      	ldr	r2, [pc, #616]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a94      	ldr	r2, [pc, #592]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a92      	ldr	r2, [pc, #584]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a90      	ldr	r2, [pc, #576]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_GPIO_Init+0x2b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
          break;
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
          break;
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          break;
 8001d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b1 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_GPIO_Init+0x2c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	; (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dea:	492f      	ldr	r1, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	492c      	ldr	r1, [pc, #176]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	491e      	ldr	r1, [pc, #120]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4918      	ldr	r1, [pc, #96]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4914      	ldr	r1, [pc, #80]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x2e2>
 8001e8a:	bf00      	nop
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10310000 	.word	0x10310000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f ae8e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	372c      	adds	r7, #44	; 0x2c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e272      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f44:	4b92      	ldr	r3, [pc, #584]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f50:	4b8f      	ldr	r3, [pc, #572]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d112      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5e>
 8001f5c:	4b8c      	ldr	r3, [pc, #560]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d10b      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6a:	4b89      	ldr	r3, [pc, #548]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06c      	beq.n	8002050 <HAL_RCC_OscConfig+0x12c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d168      	bne.n	8002050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e24c      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x76>
 8001f8c:	4b80      	ldr	r3, [pc, #512]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a7f      	ldr	r2, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e02e      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001fa2:	4b7b      	ldr	r3, [pc, #492]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7a      	ldr	r2, [pc, #488]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b78      	ldr	r3, [pc, #480]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a77      	ldr	r2, [pc, #476]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xbc>
 8001fc6:	4b72      	ldr	r3, [pc, #456]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a71      	ldr	r2, [pc, #452]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd4>
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6a      	ldr	r2, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a67      	ldr	r2, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f8b6 	bl	8001170 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f8b2 	bl	8001170 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e200      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xe4>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f8a2 	bl	8001170 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f89e 	bl	8001170 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1ec      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x10c>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205e:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800206a:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x18c>
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b43      	ldr	r3, [pc, #268]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x176>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1c0      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4939      	ldr	r1, [pc, #228]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e03a      	b.n	8002126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x270>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff f857 	bl	8001170 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff f853 	bl	8001170 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1a1      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4927      	ldr	r1, [pc, #156]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_RCC_OscConfig+0x270>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff f836 	bl	8001170 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff f832 	bl	8001170 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e180      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03a      	beq.n	80021a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d019      	beq.n	800216e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_RCC_OscConfig+0x274>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7ff f816 	bl	8001170 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002148:	f7ff f812 	bl	8001170 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e160      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_RCC_OscConfig+0x26c>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002166:	2001      	movs	r0, #1
 8002168:	f000 faba 	bl	80026e0 <RCC_Delay>
 800216c:	e01c      	b.n	80021a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_RCC_OscConfig+0x274>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe fffc 	bl	8001170 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217a:	e00f      	b.n	800219c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7fe fff8 	bl	8001170 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d908      	bls.n	800219c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e146      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	42420000 	.word	0x42420000
 8002198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e9      	bne.n	800217c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a6 	beq.w	8002302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10d      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b82      	ldr	r3, [pc, #520]	; (80023ec <HAL_RCC_OscConfig+0x4c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ee:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <HAL_RCC_OscConfig+0x4c8>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fa:	f7fe ffb9 	bl	8001170 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002202:	f7fe ffb5 	bl	8001170 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	; 0x64
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e103      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4b75      	ldr	r3, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4c8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x312>
 8002228:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e02d      	b.n	8002292 <HAL_RCC_OscConfig+0x36e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x334>
 800223e:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	e01c      	b.n	8002292 <HAL_RCC_OscConfig+0x36e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x356>
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e00b      	b.n	8002292 <HAL_RCC_OscConfig+0x36e>
 800227a:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a5a      	ldr	r2, [pc, #360]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6213      	str	r3, [r2, #32]
 8002286:	4b58      	ldr	r3, [pc, #352]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a57      	ldr	r2, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe ff69 	bl	8001170 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe ff65 	bl	8001170 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0b1      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ee      	beq.n	80022a2 <HAL_RCC_OscConfig+0x37e>
 80022c4:	e014      	b.n	80022f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe ff53 	bl	8001170 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe ff4f 	bl	8001170 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e09b      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ee      	bne.n	80022ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8087 	beq.w	800241a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d061      	beq.n	80023dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d146      	bne.n	80023ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x4cc>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe ff23 	bl	8001170 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe ff1f 	bl	8001170 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e06d      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d108      	bne.n	8002368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4921      	ldr	r1, [pc, #132]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a19      	ldr	r1, [r3, #32]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	430b      	orrs	r3, r1
 800237a:	491b      	ldr	r1, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4cc>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fef3 	bl	8001170 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe feef 	bl	8001170 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03d      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x46a>
 80023ac:	e035      	b.n	800241a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_RCC_OscConfig+0x4cc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fedc 	bl	8001170 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe fed8 	bl	8001170 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e026      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x498>
 80023da:	e01e      	b.n	800241a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e019      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x500>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d910      	bls.n	800246c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4965      	ldr	r1, [pc, #404]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0b8      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	494d      	ldr	r1, [pc, #308]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d040      	beq.n	8002548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d115      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e07f      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e073      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4936      	ldr	r1, [pc, #216]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002518:	f7fe fe2a 	bl	8001170 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7fe fe26 	bl	8001170 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e053      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d210      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0207 	bic.w	r2, r3, #7
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e032      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4916      	ldr	r1, [pc, #88]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490e      	ldr	r1, [pc, #56]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b6:	f000 f821 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490a      	ldr	r1, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1cc>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1d0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fd88 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08003f20 	.word	0x08003f20
 80025f4:	20000020 	.word	0x20000020
 80025f8:	20000024 	.word	0x20000024

080025fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCC_GetSysClockFreq+0x94>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x30>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x36>
 800262a:	e027      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	613b      	str	r3, [r7, #16]
      break;
 8002630:	e027      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_RCC_GetSysClockFreq+0x9c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_GetSysClockFreq+0x94>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0c5b      	lsrs	r3, r3, #17
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800265e:	fb03 f202 	mul.w	r2, r3, r2
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e004      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	613b      	str	r3, [r7, #16]
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	693b      	ldr	r3, [r7, #16]
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	007a1200 	.word	0x007a1200
 8002698:	08003f38 	.word	0x08003f38
 800269c:	08003f48 	.word	0x08003f48
 80026a0:	003d0900 	.word	0x003d0900

080026a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20000020 	.word	0x20000020

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff fff2 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0adb      	lsrs	r3, r3, #11
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08003f30 	.word	0x08003f30

080026e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <RCC_Delay+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <RCC_Delay+0x38>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026fc:	bf00      	nop
  }
  while (Delay --);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	60fa      	str	r2, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f9      	bne.n	80026fc <RCC_Delay+0x1c>
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000020 	.word	0x20000020
 8002718:	10624dd3 	.word	0x10624dd3

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d07d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273c:	4b4f      	ldr	r3, [pc, #316]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a4b      	ldr	r2, [pc, #300]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d118      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a42      	ldr	r2, [pc, #264]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277c:	f7fe fcf8 	bl	8001170 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	e008      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002784:	f7fe fcf4 	bl	8001170 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e06d      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02e      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d027      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ca:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027d6:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fcc3 	bl	8001170 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fcbf 	bl	8001170 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e036      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4917      	ldr	r1, [pc, #92]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	4313      	orrs	r3, r2
 8002820:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	490b      	ldr	r1, [pc, #44]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420440 	.word	0x42420440

08002888 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	f200 808a 	bhi.w	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d045      	beq.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d075      	beq.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028be:	e082      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80028c0:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028c6:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d07b      	beq.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0c5b      	lsrs	r3, r3, #17
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	4a3b      	ldr	r2, [pc, #236]	; (80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002904:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	e004      	b.n	8002920 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a34      	ldr	r2, [pc, #208]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292c:	d102      	bne.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	61bb      	str	r3, [r7, #24]
      break;
 8002932:	e04a      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
      break;
 8002942:	e042      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d108      	bne.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e01f      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002980:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e00f      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002992:	d11c      	bne.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80029a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029a4:	61bb      	str	r3, [r7, #24]
      break;
 80029a6:	e012      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029a8:	e011      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029aa:	f7ff fe85 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0b9b      	lsrs	r3, r3, #14
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	61bb      	str	r3, [r7, #24]
      break;
 80029c4:	e004      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029ce:	bf00      	nop
    }
  }
  return (frequency);
 80029d0:	69bb      	ldr	r3, [r7, #24]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08003f4c 	.word	0x08003f4c
 80029e4:	08003f5c 	.word	0x08003f5c
 80029e8:	007a1200 	.word	0x007a1200
 80029ec:	003d0900 	.word	0x003d0900
 80029f0:	aaaaaaab 	.word	0xaaaaaaab

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe f834 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 fab2 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e041      	b.n	8002b28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f839 	bl	8002b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f000 fa63 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start+0x24>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e022      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d109      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x3e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e015      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x58>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e008      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e05e      	b.n	8002c74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x82>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x92>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xa2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc50 	bl	800349c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_TIM_PWM_Start+0x138>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_TIM_PWM_Start+0x138>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d009      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_TIM_PWM_Start+0x13c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <HAL_TIM_PWM_Start+0x140>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d010      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800

08002c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0ae      	b.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	f200 809f 	bhi.w	8002df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002df5 	.word	0x08002df5
 8002cc4:	08002df5 	.word	0x08002df5
 8002cc8:	08002df5 	.word	0x08002df5
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002df5 	.word	0x08002df5
 8002cd4:	08002df5 	.word	0x08002df5
 8002cd8:	08002df5 	.word	0x08002df5
 8002cdc:	08002d73 	.word	0x08002d73
 8002ce0:	08002df5 	.word	0x08002df5
 8002ce4:	08002df5 	.word	0x08002df5
 8002ce8:	08002df5 	.word	0x08002df5
 8002cec:	08002db3 	.word	0x08002db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f9b2 	bl	8003060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	619a      	str	r2, [r3, #24]
      break;
 8002d2e:	e064      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f9f8 	bl	800312c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
      break;
 8002d70:	e043      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fa41 	bl	8003200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0204 	bic.w	r2, r2, #4
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
      break;
 8002db0:	e023      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fa8b 	bl	80032d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69d9      	ldr	r1, [r3, #28]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	021a      	lsls	r2, r3, #8
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	61da      	str	r2, [r3, #28]
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
      break;
 8002df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b4      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x172>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11a>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13a>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f000 facc 	bl	800345e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f000 fab5 	bl	800345e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fa2c 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa83 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fa4a 	bl	80033cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	; 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa73 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa0c 	bl	8003370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa63 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fa5a 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a25      	ldr	r2, [pc, #148]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800

08003060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 0201 	bic.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <TIM_OC1_SetConfig+0xc8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10c      	bne.n	80030d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0308 	bic.w	r3, r3, #8
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a13      	ldr	r2, [pc, #76]	; (8003128 <TIM_OC1_SetConfig+0xc8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d111      	bne.n	8003102 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	621a      	str	r2, [r3, #32]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40012c00 	.word	0x40012c00

0800312c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 0210 	bic.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0320 	bic.w	r3, r3, #32
 8003176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <TIM_OC2_SetConfig+0xd0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10d      	bne.n	80031a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC2_SetConfig+0xd0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d113      	bne.n	80031d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00

08003200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <TIM_OC3_SetConfig+0xd0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10d      	bne.n	800327a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <TIM_OC3_SetConfig+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d113      	bne.n	80032aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00

080032d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	031b      	lsls	r3, r3, #12
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <TIM_OC4_SetConfig+0x98>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d109      	bne.n	8003348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 030a 	bic.w	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0210 	bic.w	r2, r3, #16
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	031b      	lsls	r3, r3, #12
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	621a      	str	r2, [r3, #32]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	f043 0307 	orr.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800345e:	b480      	push	{r7}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4313      	orrs	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	609a      	str	r2, [r3, #8]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e046      	b.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d009      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10c      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000002c 	.word	0x2000002c

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	2600      	movs	r6, #0
 80035b0:	4d0c      	ldr	r5, [pc, #48]	; (80035e4 <__libc_init_array+0x38>)
 80035b2:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	f000 fc9c 	bl	8003ef8 <_init>
 80035c0:	2600      	movs	r6, #0
 80035c2:	4d0a      	ldr	r5, [pc, #40]	; (80035ec <__libc_init_array+0x40>)
 80035c4:	4c0a      	ldr	r4, [pc, #40]	; (80035f0 <__libc_init_array+0x44>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08003f94 	.word	0x08003f94
 80035e8:	08003f94 	.word	0x08003f94
 80035ec:	08003f94 	.word	0x08003f94
 80035f0:	08003f98 	.word	0x08003f98

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800360a:	b500      	push	{lr}
 800360c:	b09c      	sub	sp, #112	; 0x70
 800360e:	ab1d      	add	r3, sp, #116	; 0x74
 8003610:	9002      	str	r0, [sp, #8]
 8003612:	9006      	str	r0, [sp, #24]
 8003614:	9107      	str	r1, [sp, #28]
 8003616:	9104      	str	r1, [sp, #16]
 8003618:	4808      	ldr	r0, [pc, #32]	; (800363c <siprintf+0x38>)
 800361a:	4909      	ldr	r1, [pc, #36]	; (8003640 <siprintf+0x3c>)
 800361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	a902      	add	r1, sp, #8
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f000 f868 	bl	80036fc <_svfiprintf_r>
 800362c:	2200      	movs	r2, #0
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	b01c      	add	sp, #112	; 0x70
 8003634:	f85d eb04 	ldr.w	lr, [sp], #4
 8003638:	b003      	add	sp, #12
 800363a:	4770      	bx	lr
 800363c:	2000002c 	.word	0x2000002c
 8003640:	ffff0208 	.word	0xffff0208

08003644 <__ssputs_r>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	688e      	ldr	r6, [r1, #8]
 800364a:	4682      	mov	sl, r0
 800364c:	429e      	cmp	r6, r3
 800364e:	460c      	mov	r4, r1
 8003650:	4690      	mov	r8, r2
 8003652:	461f      	mov	r7, r3
 8003654:	d838      	bhi.n	80036c8 <__ssputs_r+0x84>
 8003656:	898a      	ldrh	r2, [r1, #12]
 8003658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800365c:	d032      	beq.n	80036c4 <__ssputs_r+0x80>
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	6909      	ldr	r1, [r1, #16]
 8003662:	3301      	adds	r3, #1
 8003664:	eba5 0901 	sub.w	r9, r5, r1
 8003668:	6965      	ldr	r5, [r4, #20]
 800366a:	444b      	add	r3, r9
 800366c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003674:	106d      	asrs	r5, r5, #1
 8003676:	429d      	cmp	r5, r3
 8003678:	bf38      	it	cc
 800367a:	461d      	movcc	r5, r3
 800367c:	0553      	lsls	r3, r2, #21
 800367e:	d531      	bpl.n	80036e4 <__ssputs_r+0xa0>
 8003680:	4629      	mov	r1, r5
 8003682:	f000 fb6f 	bl	8003d64 <_malloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	b950      	cbnz	r0, 80036a0 <__ssputs_r+0x5c>
 800368a:	230c      	movs	r3, #12
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f8ca 3000 	str.w	r3, [sl]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	464a      	mov	r2, r9
 80036a2:	6921      	ldr	r1, [r4, #16]
 80036a4:	f000 face 	bl	8003c44 <memcpy>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	6126      	str	r6, [r4, #16]
 80036b6:	444e      	add	r6, r9
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	463e      	mov	r6, r7
 80036bc:	6165      	str	r5, [r4, #20]
 80036be:	eba5 0509 	sub.w	r5, r5, r9
 80036c2:	60a5      	str	r5, [r4, #8]
 80036c4:	42be      	cmp	r6, r7
 80036c6:	d900      	bls.n	80036ca <__ssputs_r+0x86>
 80036c8:	463e      	mov	r6, r7
 80036ca:	4632      	mov	r2, r6
 80036cc:	4641      	mov	r1, r8
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	f000 fac6 	bl	8003c60 <memmove>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	2000      	movs	r0, #0
 80036d8:	1b9b      	subs	r3, r3, r6
 80036da:	60a3      	str	r3, [r4, #8]
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	4433      	add	r3, r6
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	e7db      	b.n	800369c <__ssputs_r+0x58>
 80036e4:	462a      	mov	r2, r5
 80036e6:	f000 fbb1 	bl	8003e4c <_realloc_r>
 80036ea:	4606      	mov	r6, r0
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1e1      	bne.n	80036b4 <__ssputs_r+0x70>
 80036f0:	4650      	mov	r0, sl
 80036f2:	6921      	ldr	r1, [r4, #16]
 80036f4:	f000 face 	bl	8003c94 <_free_r>
 80036f8:	e7c7      	b.n	800368a <__ssputs_r+0x46>
	...

080036fc <_svfiprintf_r>:
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	4698      	mov	r8, r3
 8003702:	898b      	ldrh	r3, [r1, #12]
 8003704:	4607      	mov	r7, r0
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	460d      	mov	r5, r1
 800370a:	4614      	mov	r4, r2
 800370c:	b09d      	sub	sp, #116	; 0x74
 800370e:	d50e      	bpl.n	800372e <_svfiprintf_r+0x32>
 8003710:	690b      	ldr	r3, [r1, #16]
 8003712:	b963      	cbnz	r3, 800372e <_svfiprintf_r+0x32>
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f000 fb25 	bl	8003d64 <_malloc_r>
 800371a:	6028      	str	r0, [r5, #0]
 800371c:	6128      	str	r0, [r5, #16]
 800371e:	b920      	cbnz	r0, 800372a <_svfiprintf_r+0x2e>
 8003720:	230c      	movs	r3, #12
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e0d1      	b.n	80038ce <_svfiprintf_r+0x1d2>
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	616b      	str	r3, [r5, #20]
 800372e:	2300      	movs	r3, #0
 8003730:	9309      	str	r3, [sp, #36]	; 0x24
 8003732:	2320      	movs	r3, #32
 8003734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	f04f 0901 	mov.w	r9, #1
 800373e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038e8 <_svfiprintf_r+0x1ec>
 8003746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374a:	4623      	mov	r3, r4
 800374c:	469a      	mov	sl, r3
 800374e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003752:	b10a      	cbz	r2, 8003758 <_svfiprintf_r+0x5c>
 8003754:	2a25      	cmp	r2, #37	; 0x25
 8003756:	d1f9      	bne.n	800374c <_svfiprintf_r+0x50>
 8003758:	ebba 0b04 	subs.w	fp, sl, r4
 800375c:	d00b      	beq.n	8003776 <_svfiprintf_r+0x7a>
 800375e:	465b      	mov	r3, fp
 8003760:	4622      	mov	r2, r4
 8003762:	4629      	mov	r1, r5
 8003764:	4638      	mov	r0, r7
 8003766:	f7ff ff6d 	bl	8003644 <__ssputs_r>
 800376a:	3001      	adds	r0, #1
 800376c:	f000 80aa 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003772:	445a      	add	r2, fp
 8003774:	9209      	str	r2, [sp, #36]	; 0x24
 8003776:	f89a 3000 	ldrb.w	r3, [sl]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a2 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003780:	2300      	movs	r3, #0
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800378a:	f10a 0a01 	add.w	sl, sl, #1
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	9307      	str	r3, [sp, #28]
 8003792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003796:	931a      	str	r3, [sp, #104]	; 0x68
 8003798:	4654      	mov	r4, sl
 800379a:	2205      	movs	r2, #5
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	4851      	ldr	r0, [pc, #324]	; (80038e8 <_svfiprintf_r+0x1ec>)
 80037a2:	f000 fa41 	bl	8003c28 <memchr>
 80037a6:	9a04      	ldr	r2, [sp, #16]
 80037a8:	b9d8      	cbnz	r0, 80037e2 <_svfiprintf_r+0xe6>
 80037aa:	06d0      	lsls	r0, r2, #27
 80037ac:	bf44      	itt	mi
 80037ae:	2320      	movmi	r3, #32
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b4:	0711      	lsls	r1, r2, #28
 80037b6:	bf44      	itt	mi
 80037b8:	232b      	movmi	r3, #43	; 0x2b
 80037ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037be:	f89a 3000 	ldrb.w	r3, [sl]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d015      	beq.n	80037f2 <_svfiprintf_r+0xf6>
 80037c6:	4654      	mov	r4, sl
 80037c8:	2000      	movs	r0, #0
 80037ca:	f04f 0c0a 	mov.w	ip, #10
 80037ce:	9a07      	ldr	r2, [sp, #28]
 80037d0:	4621      	mov	r1, r4
 80037d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d6:	3b30      	subs	r3, #48	; 0x30
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d94e      	bls.n	800387a <_svfiprintf_r+0x17e>
 80037dc:	b1b0      	cbz	r0, 800380c <_svfiprintf_r+0x110>
 80037de:	9207      	str	r2, [sp, #28]
 80037e0:	e014      	b.n	800380c <_svfiprintf_r+0x110>
 80037e2:	eba0 0308 	sub.w	r3, r0, r8
 80037e6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	46a2      	mov	sl, r4
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	e7d2      	b.n	8003798 <_svfiprintf_r+0x9c>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfbb      	ittet	lt
 80037fe:	425b      	neglt	r3, r3
 8003800:	f042 0202 	orrlt.w	r2, r2, #2
 8003804:	9307      	strge	r3, [sp, #28]
 8003806:	9307      	strlt	r3, [sp, #28]
 8003808:	bfb8      	it	lt
 800380a:	9204      	strlt	r2, [sp, #16]
 800380c:	7823      	ldrb	r3, [r4, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d10c      	bne.n	800382c <_svfiprintf_r+0x130>
 8003812:	7863      	ldrb	r3, [r4, #1]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d135      	bne.n	8003884 <_svfiprintf_r+0x188>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	3402      	adds	r4, #2
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	9203      	str	r2, [sp, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfb8      	it	lt
 8003826:	f04f 33ff 	movlt.w	r3, #4294967295
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80038ec <_svfiprintf_r+0x1f0>
 8003830:	2203      	movs	r2, #3
 8003832:	4650      	mov	r0, sl
 8003834:	7821      	ldrb	r1, [r4, #0]
 8003836:	f000 f9f7 	bl	8003c28 <memchr>
 800383a:	b140      	cbz	r0, 800384e <_svfiprintf_r+0x152>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	eba0 000a 	sub.w	r0, r0, sl
 8003842:	fa03 f000 	lsl.w	r0, r3, r0
 8003846:	9b04      	ldr	r3, [sp, #16]
 8003848:	3401      	adds	r4, #1
 800384a:	4303      	orrs	r3, r0
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003852:	2206      	movs	r2, #6
 8003854:	4826      	ldr	r0, [pc, #152]	; (80038f0 <_svfiprintf_r+0x1f4>)
 8003856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385a:	f000 f9e5 	bl	8003c28 <memchr>
 800385e:	2800      	cmp	r0, #0
 8003860:	d038      	beq.n	80038d4 <_svfiprintf_r+0x1d8>
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <_svfiprintf_r+0x1f8>)
 8003864:	bb1b      	cbnz	r3, 80038ae <_svfiprintf_r+0x1b2>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	3308      	adds	r3, #8
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	4433      	add	r3, r6
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	e767      	b.n	800374a <_svfiprintf_r+0x4e>
 800387a:	460c      	mov	r4, r1
 800387c:	2001      	movs	r0, #1
 800387e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003882:	e7a5      	b.n	80037d0 <_svfiprintf_r+0xd4>
 8003884:	2300      	movs	r3, #0
 8003886:	f04f 0c0a 	mov.w	ip, #10
 800388a:	4619      	mov	r1, r3
 800388c:	3401      	adds	r4, #1
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4620      	mov	r0, r4
 8003892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003896:	3a30      	subs	r2, #48	; 0x30
 8003898:	2a09      	cmp	r2, #9
 800389a:	d903      	bls.n	80038a4 <_svfiprintf_r+0x1a8>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c5      	beq.n	800382c <_svfiprintf_r+0x130>
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	e7c3      	b.n	800382c <_svfiprintf_r+0x130>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2301      	movs	r3, #1
 80038a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ac:	e7f0      	b.n	8003890 <_svfiprintf_r+0x194>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4638      	mov	r0, r7
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <_svfiprintf_r+0x1fc>)
 80038b8:	a904      	add	r1, sp, #16
 80038ba:	f3af 8000 	nop.w
 80038be:	1c42      	adds	r2, r0, #1
 80038c0:	4606      	mov	r6, r0
 80038c2:	d1d6      	bne.n	8003872 <_svfiprintf_r+0x176>
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	065b      	lsls	r3, r3, #25
 80038c8:	f53f af2c 	bmi.w	8003724 <_svfiprintf_r+0x28>
 80038cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ce:	b01d      	add	sp, #116	; 0x74
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	462a      	mov	r2, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <_svfiprintf_r+0x1fc>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	f000 f87c 	bl	80039dc <_printf_i>
 80038e4:	e7eb      	b.n	80038be <_svfiprintf_r+0x1c2>
 80038e6:	bf00      	nop
 80038e8:	08003f5e 	.word	0x08003f5e
 80038ec:	08003f64 	.word	0x08003f64
 80038f0:	08003f68 	.word	0x08003f68
 80038f4:	00000000 	.word	0x00000000
 80038f8:	08003645 	.word	0x08003645

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4616      	mov	r6, r2
 8003902:	4699      	mov	r9, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	4607      	mov	r7, r0
 800390a:	4293      	cmp	r3, r2
 800390c:	bfb8      	it	lt
 800390e:	4613      	movlt	r3, r2
 8003910:	6033      	str	r3, [r6, #0]
 8003912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003916:	460c      	mov	r4, r1
 8003918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800391c:	b10a      	cbz	r2, 8003922 <_printf_common+0x26>
 800391e:	3301      	adds	r3, #1
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	6833      	ldrmi	r3, [r6, #0]
 800392a:	3302      	addmi	r3, #2
 800392c:	6033      	strmi	r3, [r6, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	f015 0506 	ands.w	r5, r5, #6
 8003934:	d106      	bne.n	8003944 <_printf_common+0x48>
 8003936:	f104 0a19 	add.w	sl, r4, #25
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc28      	bgt.n	8003996 <_printf_common+0x9a>
 8003944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	bf18      	it	ne
 800394e:	2301      	movne	r3, #1
 8003950:	0692      	lsls	r2, r2, #26
 8003952:	d42d      	bmi.n	80039b0 <_printf_common+0xb4>
 8003954:	4649      	mov	r1, r9
 8003956:	4638      	mov	r0, r7
 8003958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d020      	beq.n	80039a4 <_printf_common+0xa8>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68e5      	ldr	r5, [r4, #12]
 8003966:	f003 0306 	and.w	r3, r3, #6
 800396a:	2b04      	cmp	r3, #4
 800396c:	bf18      	it	ne
 800396e:	2500      	movne	r5, #0
 8003970:	6832      	ldr	r2, [r6, #0]
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	bf08      	it	eq
 800397a:	1aad      	subeq	r5, r5, r2
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	bf08      	it	eq
 8003980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003984:	4293      	cmp	r3, r2
 8003986:	bfc4      	itt	gt
 8003988:	1a9b      	subgt	r3, r3, r2
 800398a:	18ed      	addgt	r5, r5, r3
 800398c:	341a      	adds	r4, #26
 800398e:	42b5      	cmp	r5, r6
 8003990:	d11a      	bne.n	80039c8 <_printf_common+0xcc>
 8003992:	2000      	movs	r0, #0
 8003994:	e008      	b.n	80039a8 <_printf_common+0xac>
 8003996:	2301      	movs	r3, #1
 8003998:	4652      	mov	r2, sl
 800399a:	4649      	mov	r1, r9
 800399c:	4638      	mov	r0, r7
 800399e:	47c0      	blx	r8
 80039a0:	3001      	adds	r0, #1
 80039a2:	d103      	bne.n	80039ac <_printf_common+0xb0>
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	3501      	adds	r5, #1
 80039ae:	e7c4      	b.n	800393a <_printf_common+0x3e>
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	18e1      	adds	r1, r4, r3
 80039b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039be:	4422      	add	r2, r4
 80039c0:	3302      	adds	r3, #2
 80039c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c6:	e7c5      	b.n	8003954 <_printf_common+0x58>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4622      	mov	r2, r4
 80039cc:	4649      	mov	r1, r9
 80039ce:	4638      	mov	r0, r7
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0e6      	beq.n	80039a4 <_printf_common+0xa8>
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7d9      	b.n	800398e <_printf_common+0x92>
	...

080039dc <_printf_i>:
 80039dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	7e0f      	ldrb	r7, [r1, #24]
 80039e2:	4691      	mov	r9, r2
 80039e4:	2f78      	cmp	r7, #120	; 0x78
 80039e6:	4680      	mov	r8, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	469a      	mov	sl, r3
 80039ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039f2:	d807      	bhi.n	8003a04 <_printf_i+0x28>
 80039f4:	2f62      	cmp	r7, #98	; 0x62
 80039f6:	d80a      	bhi.n	8003a0e <_printf_i+0x32>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	f000 80d9 	beq.w	8003bb0 <_printf_i+0x1d4>
 80039fe:	2f58      	cmp	r7, #88	; 0x58
 8003a00:	f000 80a4 	beq.w	8003b4c <_printf_i+0x170>
 8003a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a0c:	e03a      	b.n	8003a84 <_printf_i+0xa8>
 8003a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d8f6      	bhi.n	8003a04 <_printf_i+0x28>
 8003a16:	a101      	add	r1, pc, #4	; (adr r1, 8003a1c <_printf_i+0x40>)
 8003a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a1c:	08003a75 	.word	0x08003a75
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a05 	.word	0x08003a05
 8003a28:	08003a05 	.word	0x08003a05
 8003a2c:	08003a05 	.word	0x08003a05
 8003a30:	08003a05 	.word	0x08003a05
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a05 	.word	0x08003a05
 8003a3c:	08003a05 	.word	0x08003a05
 8003a40:	08003a05 	.word	0x08003a05
 8003a44:	08003a05 	.word	0x08003a05
 8003a48:	08003b97 	.word	0x08003b97
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003b79 	.word	0x08003b79
 8003a54:	08003a05 	.word	0x08003a05
 8003a58:	08003a05 	.word	0x08003a05
 8003a5c:	08003bb9 	.word	0x08003bb9
 8003a60:	08003a05 	.word	0x08003a05
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a05 	.word	0x08003a05
 8003a6c:	08003a05 	.word	0x08003a05
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	602a      	str	r2, [r5, #0]
 8003a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0a4      	b.n	8003bd2 <_printf_i+0x1f6>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	6829      	ldr	r1, [r5, #0]
 8003a8c:	0606      	lsls	r6, r0, #24
 8003a8e:	f101 0304 	add.w	r3, r1, #4
 8003a92:	d50a      	bpl.n	8003aaa <_printf_i+0xce>
 8003a94:	680e      	ldr	r6, [r1, #0]
 8003a96:	602b      	str	r3, [r5, #0]
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	da03      	bge.n	8003aa4 <_printf_i+0xc8>
 8003a9c:	232d      	movs	r3, #45	; 0x2d
 8003a9e:	4276      	negs	r6, r6
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	485e      	ldr	r0, [pc, #376]	; (8003c20 <_printf_i+0x244>)
 8003aa8:	e019      	b.n	8003ade <_printf_i+0x102>
 8003aaa:	680e      	ldr	r6, [r1, #0]
 8003aac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	bf18      	it	ne
 8003ab4:	b236      	sxthne	r6, r6
 8003ab6:	e7ef      	b.n	8003a98 <_printf_i+0xbc>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	6029      	str	r1, [r5, #0]
 8003ac0:	0601      	lsls	r1, r0, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xec>
 8003ac4:	681e      	ldr	r6, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0xf2>
 8003ac8:	0646      	lsls	r6, r0, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xe8>
 8003acc:	881e      	ldrh	r6, [r3, #0]
 8003ace:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2308      	moveq	r3, #8
 8003ad4:	230a      	movne	r3, #10
 8003ad6:	4852      	ldr	r0, [pc, #328]	; (8003c20 <_printf_i+0x244>)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ade:	6865      	ldr	r5, [r4, #4]
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	bfa8      	it	ge
 8003ae4:	6821      	ldrge	r1, [r4, #0]
 8003ae6:	60a5      	str	r5, [r4, #8]
 8003ae8:	bfa4      	itt	ge
 8003aea:	f021 0104 	bicge.w	r1, r1, #4
 8003aee:	6021      	strge	r1, [r4, #0]
 8003af0:	b90e      	cbnz	r6, 8003af6 <_printf_i+0x11a>
 8003af2:	2d00      	cmp	r5, #0
 8003af4:	d04d      	beq.n	8003b92 <_printf_i+0x1b6>
 8003af6:	4615      	mov	r5, r2
 8003af8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003afc:	fb03 6711 	mls	r7, r3, r1, r6
 8003b00:	5dc7      	ldrb	r7, [r0, r7]
 8003b02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b06:	4637      	mov	r7, r6
 8003b08:	42bb      	cmp	r3, r7
 8003b0a:	460e      	mov	r6, r1
 8003b0c:	d9f4      	bls.n	8003af8 <_printf_i+0x11c>
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x14e>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07de      	lsls	r6, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x14e>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6861      	ldr	r1, [r4, #4]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b2a:	1b52      	subs	r2, r2, r5
 8003b2c:	6122      	str	r2, [r4, #16]
 8003b2e:	464b      	mov	r3, r9
 8003b30:	4621      	mov	r1, r4
 8003b32:	4640      	mov	r0, r8
 8003b34:	f8cd a000 	str.w	sl, [sp]
 8003b38:	aa03      	add	r2, sp, #12
 8003b3a:	f7ff fedf 	bl	80038fc <_printf_common>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d14c      	bne.n	8003bdc <_printf_i+0x200>
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295
 8003b46:	b004      	add	sp, #16
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	4834      	ldr	r0, [pc, #208]	; (8003c20 <_printf_i+0x244>)
 8003b4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b52:	6829      	ldr	r1, [r5, #0]
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b5a:	6029      	str	r1, [r5, #0]
 8003b5c:	061d      	lsls	r5, r3, #24
 8003b5e:	d514      	bpl.n	8003b8a <_printf_i+0x1ae>
 8003b60:	07df      	lsls	r7, r3, #31
 8003b62:	bf44      	itt	mi
 8003b64:	f043 0320 	orrmi.w	r3, r3, #32
 8003b68:	6023      	strmi	r3, [r4, #0]
 8003b6a:	b91e      	cbnz	r6, 8003b74 <_printf_i+0x198>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2310      	movs	r3, #16
 8003b76:	e7af      	b.n	8003ad8 <_printf_i+0xfc>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	2378      	movs	r3, #120	; 0x78
 8003b82:	4828      	ldr	r0, [pc, #160]	; (8003c24 <_printf_i+0x248>)
 8003b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b88:	e7e3      	b.n	8003b52 <_printf_i+0x176>
 8003b8a:	0659      	lsls	r1, r3, #25
 8003b8c:	bf48      	it	mi
 8003b8e:	b2b6      	uxthmi	r6, r6
 8003b90:	e7e6      	b.n	8003b60 <_printf_i+0x184>
 8003b92:	4615      	mov	r5, r2
 8003b94:	e7bb      	b.n	8003b0e <_printf_i+0x132>
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	6826      	ldr	r6, [r4, #0]
 8003b9a:	1d18      	adds	r0, r3, #4
 8003b9c:	6961      	ldr	r1, [r4, #20]
 8003b9e:	6028      	str	r0, [r5, #0]
 8003ba0:	0635      	lsls	r5, r6, #24
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	d501      	bpl.n	8003baa <_printf_i+0x1ce>
 8003ba6:	6019      	str	r1, [r3, #0]
 8003ba8:	e002      	b.n	8003bb0 <_printf_i+0x1d4>
 8003baa:	0670      	lsls	r0, r6, #25
 8003bac:	d5fb      	bpl.n	8003ba6 <_printf_i+0x1ca>
 8003bae:	8019      	strh	r1, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4615      	mov	r5, r2
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	e7ba      	b.n	8003b2e <_printf_i+0x152>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	602a      	str	r2, [r5, #0]
 8003bc0:	681d      	ldr	r5, [r3, #0]
 8003bc2:	6862      	ldr	r2, [r4, #4]
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f000 f82f 	bl	8003c28 <memchr>
 8003bca:	b108      	cbz	r0, 8003bd0 <_printf_i+0x1f4>
 8003bcc:	1b40      	subs	r0, r0, r5
 8003bce:	6060      	str	r0, [r4, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bda:	e7a8      	b.n	8003b2e <_printf_i+0x152>
 8003bdc:	462a      	mov	r2, r5
 8003bde:	4649      	mov	r1, r9
 8003be0:	4640      	mov	r0, r8
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	47d0      	blx	sl
 8003be6:	3001      	adds	r0, #1
 8003be8:	d0ab      	beq.n	8003b42 <_printf_i+0x166>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	079b      	lsls	r3, r3, #30
 8003bee:	d413      	bmi.n	8003c18 <_printf_i+0x23c>
 8003bf0:	68e0      	ldr	r0, [r4, #12]
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	4298      	cmp	r0, r3
 8003bf6:	bfb8      	it	lt
 8003bf8:	4618      	movlt	r0, r3
 8003bfa:	e7a4      	b.n	8003b46 <_printf_i+0x16a>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4632      	mov	r2, r6
 8003c00:	4649      	mov	r1, r9
 8003c02:	4640      	mov	r0, r8
 8003c04:	47d0      	blx	sl
 8003c06:	3001      	adds	r0, #1
 8003c08:	d09b      	beq.n	8003b42 <_printf_i+0x166>
 8003c0a:	3501      	adds	r5, #1
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	9903      	ldr	r1, [sp, #12]
 8003c10:	1a5b      	subs	r3, r3, r1
 8003c12:	42ab      	cmp	r3, r5
 8003c14:	dcf2      	bgt.n	8003bfc <_printf_i+0x220>
 8003c16:	e7eb      	b.n	8003bf0 <_printf_i+0x214>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	f104 0619 	add.w	r6, r4, #25
 8003c1e:	e7f5      	b.n	8003c0c <_printf_i+0x230>
 8003c20:	08003f6f 	.word	0x08003f6f
 8003c24:	08003f80 	.word	0x08003f80

08003c28 <memchr>:
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	b2c9      	uxtb	r1, r1
 8003c2e:	4402      	add	r2, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	d101      	bne.n	8003c3a <memchr+0x12>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e003      	b.n	8003c42 <memchr+0x1a>
 8003c3a:	7804      	ldrb	r4, [r0, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	428c      	cmp	r4, r1
 8003c40:	d1f6      	bne.n	8003c30 <memchr+0x8>
 8003c42:	bd10      	pop	{r4, pc}

08003c44 <memcpy>:
 8003c44:	440a      	add	r2, r1
 8003c46:	4291      	cmp	r1, r2
 8003c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c4c:	d100      	bne.n	8003c50 <memcpy+0xc>
 8003c4e:	4770      	bx	lr
 8003c50:	b510      	push	{r4, lr}
 8003c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c5c:	d1f9      	bne.n	8003c52 <memcpy+0xe>
 8003c5e:	bd10      	pop	{r4, pc}

08003c60 <memmove>:
 8003c60:	4288      	cmp	r0, r1
 8003c62:	b510      	push	{r4, lr}
 8003c64:	eb01 0402 	add.w	r4, r1, r2
 8003c68:	d902      	bls.n	8003c70 <memmove+0x10>
 8003c6a:	4284      	cmp	r4, r0
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	d807      	bhi.n	8003c80 <memmove+0x20>
 8003c70:	1e43      	subs	r3, r0, #1
 8003c72:	42a1      	cmp	r1, r4
 8003c74:	d008      	beq.n	8003c88 <memmove+0x28>
 8003c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c7e:	e7f8      	b.n	8003c72 <memmove+0x12>
 8003c80:	4601      	mov	r1, r0
 8003c82:	4402      	add	r2, r0
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d100      	bne.n	8003c8a <memmove+0x2a>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c92:	e7f7      	b.n	8003c84 <memmove+0x24>

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d040      	beq.n	8003d1e <_free_r+0x8a>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 f910 	bl	8003ecc <__malloc_lock>
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <_free_r+0x8c>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	b933      	cbnz	r3, 8003cc0 <_free_r+0x2c>
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	6014      	str	r4, [r2, #0]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbc:	f000 b90c 	b.w	8003ed8 <__malloc_unlock>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d908      	bls.n	8003cd6 <_free_r+0x42>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	bf01      	itttt	eq
 8003ccc:	6819      	ldreq	r1, [r3, #0]
 8003cce:	685b      	ldreq	r3, [r3, #4]
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	e7ed      	b.n	8003cb2 <_free_r+0x1e>
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b10b      	cbz	r3, 8003ce0 <_free_r+0x4c>
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	d9fa      	bls.n	8003cd6 <_free_r+0x42>
 8003ce0:	6811      	ldr	r1, [r2, #0]
 8003ce2:	1850      	adds	r0, r2, r1
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d10b      	bne.n	8003d00 <_free_r+0x6c>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	4401      	add	r1, r0
 8003cec:	1850      	adds	r0, r2, r1
 8003cee:	4283      	cmp	r3, r0
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	d1e0      	bne.n	8003cb6 <_free_r+0x22>
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4401      	add	r1, r0
 8003cfa:	6011      	str	r1, [r2, #0]
 8003cfc:	6053      	str	r3, [r2, #4]
 8003cfe:	e7da      	b.n	8003cb6 <_free_r+0x22>
 8003d00:	d902      	bls.n	8003d08 <_free_r+0x74>
 8003d02:	230c      	movs	r3, #12
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	e7d6      	b.n	8003cb6 <_free_r+0x22>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf01      	itttt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	1809      	addeq	r1, r1, r0
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	6063      	str	r3, [r4, #4]
 8003d1a:	6054      	str	r4, [r2, #4]
 8003d1c:	e7cb      	b.n	8003cb6 <_free_r+0x22>
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000174 	.word	0x20000174

08003d24 <sbrk_aligned>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4e0e      	ldr	r6, [pc, #56]	; (8003d60 <sbrk_aligned+0x3c>)
 8003d28:	460c      	mov	r4, r1
 8003d2a:	6831      	ldr	r1, [r6, #0]
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b911      	cbnz	r1, 8003d36 <sbrk_aligned+0x12>
 8003d30:	f000 f8bc 	bl	8003eac <_sbrk_r>
 8003d34:	6030      	str	r0, [r6, #0]
 8003d36:	4621      	mov	r1, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 f8b7 	bl	8003eac <_sbrk_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d00a      	beq.n	8003d58 <sbrk_aligned+0x34>
 8003d42:	1cc4      	adds	r4, r0, #3
 8003d44:	f024 0403 	bic.w	r4, r4, #3
 8003d48:	42a0      	cmp	r0, r4
 8003d4a:	d007      	beq.n	8003d5c <sbrk_aligned+0x38>
 8003d4c:	1a21      	subs	r1, r4, r0
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 f8ac 	bl	8003eac <_sbrk_r>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d101      	bne.n	8003d5c <sbrk_aligned+0x38>
 8003d58:	f04f 34ff 	mov.w	r4, #4294967295
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	20000178 	.word	0x20000178

08003d64 <_malloc_r>:
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	1ccd      	adds	r5, r1, #3
 8003d6a:	f025 0503 	bic.w	r5, r5, #3
 8003d6e:	3508      	adds	r5, #8
 8003d70:	2d0c      	cmp	r5, #12
 8003d72:	bf38      	it	cc
 8003d74:	250c      	movcc	r5, #12
 8003d76:	2d00      	cmp	r5, #0
 8003d78:	4607      	mov	r7, r0
 8003d7a:	db01      	blt.n	8003d80 <_malloc_r+0x1c>
 8003d7c:	42a9      	cmp	r1, r5
 8003d7e:	d905      	bls.n	8003d8c <_malloc_r+0x28>
 8003d80:	230c      	movs	r3, #12
 8003d82:	2600      	movs	r6, #0
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4630      	mov	r0, r6
 8003d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8c:	4e2e      	ldr	r6, [pc, #184]	; (8003e48 <_malloc_r+0xe4>)
 8003d8e:	f000 f89d 	bl	8003ecc <__malloc_lock>
 8003d92:	6833      	ldr	r3, [r6, #0]
 8003d94:	461c      	mov	r4, r3
 8003d96:	bb34      	cbnz	r4, 8003de6 <_malloc_r+0x82>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f7ff ffc2 	bl	8003d24 <sbrk_aligned>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	4604      	mov	r4, r0
 8003da4:	d14d      	bne.n	8003e42 <_malloc_r+0xde>
 8003da6:	6834      	ldr	r4, [r6, #0]
 8003da8:	4626      	mov	r6, r4
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d140      	bne.n	8003e30 <_malloc_r+0xcc>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4631      	mov	r1, r6
 8003db2:	4638      	mov	r0, r7
 8003db4:	eb04 0803 	add.w	r8, r4, r3
 8003db8:	f000 f878 	bl	8003eac <_sbrk_r>
 8003dbc:	4580      	cmp	r8, r0
 8003dbe:	d13a      	bne.n	8003e36 <_malloc_r+0xd2>
 8003dc0:	6821      	ldr	r1, [r4, #0]
 8003dc2:	3503      	adds	r5, #3
 8003dc4:	1a6d      	subs	r5, r5, r1
 8003dc6:	f025 0503 	bic.w	r5, r5, #3
 8003dca:	3508      	adds	r5, #8
 8003dcc:	2d0c      	cmp	r5, #12
 8003dce:	bf38      	it	cc
 8003dd0:	250c      	movcc	r5, #12
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	f7ff ffa5 	bl	8003d24 <sbrk_aligned>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d02b      	beq.n	8003e36 <_malloc_r+0xd2>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	442b      	add	r3, r5
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	e00e      	b.n	8003e04 <_malloc_r+0xa0>
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	1b52      	subs	r2, r2, r5
 8003dea:	d41e      	bmi.n	8003e2a <_malloc_r+0xc6>
 8003dec:	2a0b      	cmp	r2, #11
 8003dee:	d916      	bls.n	8003e1e <_malloc_r+0xba>
 8003df0:	1961      	adds	r1, r4, r5
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	6025      	str	r5, [r4, #0]
 8003df6:	bf18      	it	ne
 8003df8:	6059      	strne	r1, [r3, #4]
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	bf08      	it	eq
 8003dfe:	6031      	streq	r1, [r6, #0]
 8003e00:	5162      	str	r2, [r4, r5]
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	4638      	mov	r0, r7
 8003e06:	f104 060b 	add.w	r6, r4, #11
 8003e0a:	f000 f865 	bl	8003ed8 <__malloc_unlock>
 8003e0e:	f026 0607 	bic.w	r6, r6, #7
 8003e12:	1d23      	adds	r3, r4, #4
 8003e14:	1af2      	subs	r2, r6, r3
 8003e16:	d0b6      	beq.n	8003d86 <_malloc_r+0x22>
 8003e18:	1b9b      	subs	r3, r3, r6
 8003e1a:	50a3      	str	r3, [r4, r2]
 8003e1c:	e7b3      	b.n	8003d86 <_malloc_r+0x22>
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	bf0c      	ite	eq
 8003e24:	6032      	streq	r2, [r6, #0]
 8003e26:	605a      	strne	r2, [r3, #4]
 8003e28:	e7ec      	b.n	8003e04 <_malloc_r+0xa0>
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	6864      	ldr	r4, [r4, #4]
 8003e2e:	e7b2      	b.n	8003d96 <_malloc_r+0x32>
 8003e30:	4634      	mov	r4, r6
 8003e32:	6876      	ldr	r6, [r6, #4]
 8003e34:	e7b9      	b.n	8003daa <_malloc_r+0x46>
 8003e36:	230c      	movs	r3, #12
 8003e38:	4638      	mov	r0, r7
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	f000 f84c 	bl	8003ed8 <__malloc_unlock>
 8003e40:	e7a1      	b.n	8003d86 <_malloc_r+0x22>
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	e7de      	b.n	8003e04 <_malloc_r+0xa0>
 8003e46:	bf00      	nop
 8003e48:	20000174 	.word	0x20000174

08003e4c <_realloc_r>:
 8003e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e50:	4680      	mov	r8, r0
 8003e52:	4614      	mov	r4, r2
 8003e54:	460e      	mov	r6, r1
 8003e56:	b921      	cbnz	r1, 8003e62 <_realloc_r+0x16>
 8003e58:	4611      	mov	r1, r2
 8003e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5e:	f7ff bf81 	b.w	8003d64 <_malloc_r>
 8003e62:	b92a      	cbnz	r2, 8003e70 <_realloc_r+0x24>
 8003e64:	f7ff ff16 	bl	8003c94 <_free_r>
 8003e68:	4625      	mov	r5, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e70:	f000 f838 	bl	8003ee4 <_malloc_usable_size_r>
 8003e74:	4284      	cmp	r4, r0
 8003e76:	4607      	mov	r7, r0
 8003e78:	d802      	bhi.n	8003e80 <_realloc_r+0x34>
 8003e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e7e:	d812      	bhi.n	8003ea6 <_realloc_r+0x5a>
 8003e80:	4621      	mov	r1, r4
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7ff ff6e 	bl	8003d64 <_malloc_r>
 8003e88:	4605      	mov	r5, r0
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d0ed      	beq.n	8003e6a <_realloc_r+0x1e>
 8003e8e:	42bc      	cmp	r4, r7
 8003e90:	4622      	mov	r2, r4
 8003e92:	4631      	mov	r1, r6
 8003e94:	bf28      	it	cs
 8003e96:	463a      	movcs	r2, r7
 8003e98:	f7ff fed4 	bl	8003c44 <memcpy>
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f7ff fef8 	bl	8003c94 <_free_r>
 8003ea4:	e7e1      	b.n	8003e6a <_realloc_r+0x1e>
 8003ea6:	4635      	mov	r5, r6
 8003ea8:	e7df      	b.n	8003e6a <_realloc_r+0x1e>
	...

08003eac <_sbrk_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4d05      	ldr	r5, [pc, #20]	; (8003ec8 <_sbrk_r+0x1c>)
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc fe5e 	bl	8000b78 <_sbrk>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_sbrk_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	2000017c 	.word	0x2000017c

08003ecc <__malloc_lock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__malloc_lock+0x8>)
 8003ece:	f000 b811 	b.w	8003ef4 <__retarget_lock_acquire_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	20000180 	.word	0x20000180

08003ed8 <__malloc_unlock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__malloc_unlock+0x8>)
 8003eda:	f000 b80c 	b.w	8003ef6 <__retarget_lock_release_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000180 	.word	0x20000180

08003ee4 <_malloc_usable_size_r>:
 8003ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee8:	1f18      	subs	r0, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfbc      	itt	lt
 8003eee:	580b      	ldrlt	r3, [r1, r0]
 8003ef0:	18c0      	addlt	r0, r0, r3
 8003ef2:	4770      	bx	lr

08003ef4 <__retarget_lock_acquire_recursive>:
 8003ef4:	4770      	bx	lr

08003ef6 <__retarget_lock_release_recursive>:
 8003ef6:	4770      	bx	lr

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
